---
description: building and extending medusas functionality, like the offer and ERP functions
alwaysApply: false
---

# How to build extended features for medusaJS

CRUD operations and core business logic (like adding offer items, calculating totals, etc.) should be implemented in the service of your module. The service acts as the main interface for managing your custom data models (e.g., offer, offer items, offer history) and encapsulates the domain logic for your ERP integration.

API routes are then used to expose these service methods to the admin UI or other clients. The API route receives the request, calls the appropriate service method (or workflow, see below), and returns the response.
See: Build Custom Features
Workflows are designed for operations that span multiple modules or systems, require multiple steps, or need features like rollback, error handling, or orchestration across systems.
For example, when an offer becomes active and you need to make reservations for product variants (inventory), or when an offer is completed and you need to release reservations and reduce stock, these are multi-step, cross-module operations.
In these cases, you should implement a custom workflow that coordinates the necessary steps (e.g., update offer status, create reservations, adjust inventory).
The workflow can resolve services from multiple modules (e.g., your offer module, the inventory module) and execute the required actions in sequence, with rollback logic if needed.
See: Module Isolation & Workflows, Workflows Fundamentals
Workflows should be triggered from your API routes (not directly from the admin UI or from within service methods). The API route acts as the entry point: it receives the request (e.g., "activate offer"), then executes the workflow that performs all the necessary steps.
This keeps your services focused on single-domain logic, while workflows handle orchestration across domains and systems.
See: How to Use the Order Module (API Route Example)
Summary:

CRUD and single-entity logic → Service methods
Multi-step, cross-module/system operations (like reservations, stock adjustments) → Workflows
Expose everything via API routes (which call services or workflows as needed), and the admin UI interacts with these API routes.
This approach ensures maintainability, modularity, and leverages Medusa’s built-in consistency and rollback features. If you need more concrete code examples, let me know!
