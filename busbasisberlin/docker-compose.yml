# Medusa Docker Compose Configuration
# Following official Medusa Docker deployment guide
# Supports both development and production environments

services:
  # Nginx SSL Proxy Service
  nginx:
    image: nginx:alpine
    container_name: medusa_nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      medusa-server:
        condition: service_healthy
    networks:
      - medusa_network
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: medusa_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: medusa-store
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-medusa_password}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - medusa_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Database Service
  redis:
    image: redis:7-alpine
    container_name: medusa_redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    networks:
      - medusa_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Medusa Backend Service (Server Mode)
  medusa-server:
    build: .
    container_name: medusa_backend_server
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Port removed - nginx handles external access
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD:-medusa_password}@postgres:5432/medusa-store
      - REDIS_URL=redis://redis:6379
      - MEDUSA_WORKER_MODE=server
      - DISABLE_MEDUSA_ADMIN=false
      - PORT=9000
    env_file:
      - .env.docker
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - medusa_network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Medusa Worker Service (Worker Mode)
  medusa-worker:
    build: .
    container_name: medusa_backend_worker
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD:-medusa_password}@postgres:5432/medusa-store
      - REDIS_URL=redis://redis:6379
      - MEDUSA_WORKER_MODE=worker
      - DISABLE_MEDUSA_ADMIN=true
      - PORT=9001
    env_file:
      - .env.docker
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - medusa_network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local

# Custom network for service communication
networks:
  medusa_network:
    driver: bridge
