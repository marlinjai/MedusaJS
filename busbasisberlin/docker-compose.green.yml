# docker-compose.green.yml
# Green deployment configuration for Medusa services
# Used for blue-green deployments

services:
  # Medusa Backend Service (Server Mode) - Green
  medusa-server-green:
    build: .
    container_name: medusa_backend_server_green
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # No external ports - accessed via nginx proxy
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD:-medusa_password}@postgres:5432/medusa-store
      - REDIS_URL=redis://redis:6379
      - MEDUSA_WORKER_MODE=server
      - DISABLE_MEDUSA_ADMIN=false
      - PORT=9002
      # Application secrets
      - JWT_SECRET=${JWT_SECRET}
      - COOKIE_SECRET=${COOKIE_SECRET}
      # Email configuration
      - RESEND_API_KEY=${RESEND_API_KEY}
      - RESEND_FROM_EMAIL=${RESEND_FROM_EMAIL}
      # Stripe configuration
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      # S3 Storage
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - S3_REGION=${S3_REGION}
      - S3_BUCKET=${S3_BUCKET}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_FILE_URL=${S3_FILE_URL}
      # Domain configuration
      - MEDUSA_BACKEND_URL=https://${DOMAIN_NAME}
      # CORS configuration
      - STORE_CORS=https://medusa-js-busbasisberlin-storefront.vercel.app
      - ADMIN_CORS=https://${DOMAIN_NAME}
      - AUTH_CORS=https://${DOMAIN_NAME},https://medusa-js-busbasisberlin-storefront.vercel.app
      # Meilisearch configuration
      - MEILISEARCH_HOST=${MEILISEARCH_HOST}
      - MEILISEARCH_API_KEY=${MEILISEARCH_API_KEY}
      - MEILISEARCH_PRODUCT_INDEX_NAME=${MEILISEARCH_PRODUCT_INDEX_NAME}
      # Admin frontend configuration (Vite needs VITE_ prefix)
      - VITE_MEDUSA_BACKEND_URL=${MEDUSA_BACKEND_URL}
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - medusa_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9002/health"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 120s

  # Medusa Worker Service (Worker Mode) - Green
  medusa-worker-green:
    build: .
    container_name: medusa_backend_worker_green
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # No external ports - worker doesn't need external access
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD:-medusa_password}@postgres:5432/medusa-store
      - REDIS_URL=redis://redis:6379
      - MEDUSA_WORKER_MODE=worker
      - DISABLE_MEDUSA_ADMIN=true
      - PORT=9003
      # Application secrets
      - JWT_SECRET=${JWT_SECRET}
      - COOKIE_SECRET=${COOKIE_SECRET}
      # Email configuration
      - RESEND_API_KEY=${RESEND_API_KEY}
      - RESEND_FROM_EMAIL=${RESEND_FROM_EMAIL}
      # Stripe configuration
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      # S3 Storage
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - S3_REGION=${S3_REGION}
      - S3_BUCKET=${S3_BUCKET}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_FILE_URL=${S3_FILE_URL}
      # Domain configuration
      - MEDUSA_BACKEND_URL=https://${DOMAIN_NAME}
      # Meilisearch configuration
      - MEILISEARCH_HOST=${MEILISEARCH_HOST}
      - MEILISEARCH_API_KEY=${MEILISEARCH_API_KEY}
      - MEILISEARCH_PRODUCT_INDEX_NAME=${MEILISEARCH_PRODUCT_INDEX_NAME}
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - medusa_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9003/health"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 120s

# Use shared network (will be created by base compose or reused if exists)
networks:
  medusa_network:
    name: busbasisberlin_medusa_network
    external: true
