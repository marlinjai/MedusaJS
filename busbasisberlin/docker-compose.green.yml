# docker-compose.green.yml
# Green deployment configuration for Medusa services
# Used for blue-green deployments

services:
  # Medusa Backend Service (Server Mode) - Green
  medusa-server-green:
    build: .
    container_name: medusa_backend_server_green
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD:-medusa_password}@postgres:5432/medusa-store
      - REDIS_URL=redis://redis:6379
      - MEDUSA_WORKER_MODE=server
      - DISABLE_MEDUSA_ADMIN=false
      - PORT=9000
    env_file:
      - .env.docker
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - medusa_network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Medusa Worker Service (Worker Mode) - Green
  medusa-worker-green:
    build: .
    container_name: medusa_backend_worker_green
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD:-medusa_password}@postgres:5432/medusa-store
      - REDIS_URL=redis://redis:6379
      - MEDUSA_WORKER_MODE=worker
      - DISABLE_MEDUSA_ADMIN=true
      - PORT=9001
    env_file:
      - .env.docker
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - medusa_network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9001/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Use shared network (will be created by base compose or reused if exists)
networks:
  medusa_network:
    name: busbasisberlin_medusa_network
    external: true
