# Medusa E-commerce Docker Setup with Blue-Green Deployment Support
# This setup includes all necessary services for production deployment

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: medusa-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: medusa
      POSTGRES_USER: medusa
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-medusa_password}
    command: ['postgres', '-c', 'ssl=off']
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - '5432:5432'
    networks:
      - medusa-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U medusa']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: medusa_redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    networks:
      - medusa-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-testpassword123}
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Medusa Server (Blue Instance)
  medusa-server-blue:
    build:
      context: ./busbasisberlin
      dockerfile: Dockerfile
    container_name: medusa-server-blue
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://medusa:${POSTGRES_PASSWORD:-medusa_password}@postgres:5432/medusa?sslmode=disable
      PGSSLMODE: disable

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-testpassword123}@redis:6379

      # Worker Mode
      MEDUSA_WORKER_MODE: server
      DISABLE_MEDUSA_ADMIN: ${DISABLE_MEDUSA_ADMIN:-false}

      # CORS Settings (HTTPS for production testing)
      STORE_CORS: ${STORE_CORS:-https://localhost:8000}
      ADMIN_CORS: ${ADMIN_CORS:-https://localhost:9000}
      AUTH_CORS: ${AUTH_CORS:-https://localhost:8000,https://localhost:9000}

      # Secrets
      JWT_SECRET: ${JWT_SECRET:-supersecret}
      COOKIE_SECRET: ${COOKIE_SECRET:-supersecret}

      # Admin Backend URL (HTTPS through nginx proxy)
      MEDUSA_BACKEND_URL: ${MEDUSA_BACKEND_URL:-https://localhost}

      # S3 Configuration
      S3_FILE_URL: ${S3_FILE_URL}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_REGION: ${S3_REGION}
      S3_BUCKET: ${S3_BUCKET}
      S3_ENDPOINT: ${S3_ENDPOINT}

      # Email Configuration
      RESEND_API_KEY: ${RESEND_API_KEY}
      RESEND_FROM_EMAIL: ${RESEND_FROM_EMAIL}

      # Port
      PORT: 9000
    ports:
      - '9000:9000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - medusa-network
    volumes:
      - ./busbasisberlin:/app
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Medusa Worker (Blue Instance)
  medusa-worker-blue:
    build:
      context: ./busbasisberlin
      dockerfile: Dockerfile
    container_name: medusa-worker-blue
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://medusa:${POSTGRES_PASSWORD:-medusa_password}@postgres:5432/medusa?sslmode=disable
      PGSSLMODE: disable

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-testpassword123}@redis:6379

      # Worker Mode
      MEDUSA_WORKER_MODE: worker
      DISABLE_MEDUSA_ADMIN: true

      # Secrets
      JWT_SECRET: ${JWT_SECRET:-supersecret}
      COOKIE_SECRET: ${COOKIE_SECRET:-supersecret}

      # S3 Configuration
      S3_FILE_URL: ${S3_FILE_URL}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_REGION: ${S3_REGION}
      S3_BUCKET: ${S3_BUCKET}
      S3_ENDPOINT: ${S3_ENDPOINT}

      # Email Configuration
      RESEND_API_KEY: ${RESEND_API_KEY}
      RESEND_FROM_EMAIL: ${RESEND_FROM_EMAIL}

      # Port
      PORT: 9001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - medusa-network
    volumes:
      - ./busbasisberlin:/app
      - /app/node_modules
    command: ['npm', 'run', 'start']

  # Medusa Server (Green Instance) - Initially stopped
  medusa-server-green:
    build:
      context: ./busbasisberlin
      dockerfile: Dockerfile
    container_name: medusa-server-green
    restart: 'no'
    environment:
      # Database
      DATABASE_URL: postgresql://medusa:${POSTGRES_PASSWORD:-medusa_password}@postgres:5432/medusa?sslmode=disable
      PGSSLMODE: disable

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-testpassword123}@redis:6379

      # Worker Mode
      MEDUSA_WORKER_MODE: server
      DISABLE_MEDUSA_ADMIN: ${DISABLE_MEDUSA_ADMIN:-false}

      # CORS Settings (HTTPS for production testing)
      STORE_CORS: ${STORE_CORS:-https://localhost:8000}
      ADMIN_CORS: ${ADMIN_CORS:-https://localhost:9002}
      AUTH_CORS: ${AUTH_CORS:-https://localhost:8000,https://localhost:9002}

      # Secrets
      JWT_SECRET: ${JWT_SECRET:-supersecret}
      COOKIE_SECRET: ${COOKIE_SECRET:-supersecret}

      # Admin Backend URL (HTTPS through nginx proxy)
      MEDUSA_BACKEND_URL: ${MEDUSA_BACKEND_URL:-https://localhost}

      # S3 Configuration
      S3_FILE_URL: ${S3_FILE_URL}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_REGION: ${S3_REGION}
      S3_BUCKET: ${S3_BUCKET}
      S3_ENDPOINT: ${S3_ENDPOINT}

      # Email Configuration
      RESEND_API_KEY: ${RESEND_API_KEY}
      RESEND_FROM_EMAIL: ${RESEND_FROM_EMAIL}

      # Port
      PORT: 9002
    ports:
      - '9002:9002'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - medusa-network
    volumes:
      - ./busbasisberlin:/app
      - /app/node_modules
    profiles:
      - green

  # Medusa Worker (Green Instance) - Initially stopped
  medusa-worker-green:
    build:
      context: ./busbasisberlin
      dockerfile: Dockerfile
    container_name: medusa-worker-green
    restart: 'no'
    environment:
      # Database
      DATABASE_URL: postgresql://medusa:${POSTGRES_PASSWORD:-medusa_password}@postgres:5432/medusa?sslmode=disable
      PGSSLMODE: disable

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-testpassword123}@redis:6379

      # Worker Mode
      MEDUSA_WORKER_MODE: worker
      DISABLE_MEDUSA_ADMIN: true

      # Secrets
      JWT_SECRET: ${JWT_SECRET:-supersecret}
      COOKIE_SECRET: ${COOKIE_SECRET:-supersecret}

      # S3 Configuration
      S3_FILE_URL: ${S3_FILE_URL}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_REGION: ${S3_REGION}
      S3_BUCKET: ${S3_BUCKET}
      S3_ENDPOINT: ${S3_ENDPOINT}

      # Email Configuration
      RESEND_API_KEY: ${RESEND_API_KEY}
      RESEND_FROM_EMAIL: ${RESEND_FROM_EMAIL}

      # Port
      PORT: 9003
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - medusa-network
    volumes:
      - ./busbasisberlin:/app
      - /app/node_modules
    command: ['npm', 'run', 'start']
    profiles:
      - green

  # Next.js Storefront
  storefront:
    build:
      context: ./busbasisberlin-storefront
      dockerfile: Dockerfile
    container_name: medusa-storefront
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_MEDUSA_BACKEND_URL: ${NEXT_PUBLIC_MEDUSA_BACKEND_URL:-https://localhost}
      NODE_ENV: production
    ports:
      - '8000:8000'
    depends_on:
      - medusa-server-blue
    networks:
      - medusa-network
    volumes:
      - ./busbasisberlin-storefront:/app
      - /app/node_modules
      - /app/.next

  # Nginx Reverse Proxy for Blue-Green Deployment
  nginx:
    image: nginx:alpine
    container_name: medusa-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - medusa-server-blue
      - storefront
    networks:
      - medusa-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  medusa-network:
    driver: bridge
