name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  DEPLOYMENT_TIMEOUT: 300 # 5 minutes timeout for deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "🚀 Starting automated deployment..."

          # Navigate to project directory
          cd ${{ secrets.PROJECT_PATH }}

          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git pull origin main

          # Copy environment file if it doesn't exist
          if [ ! -f .env.docker ]; then
            echo "📋 Setting up environment file..."
            cp env.docker.example .env.docker
            # Note: Environment variables should be set via GitHub Secrets
          fi

          # Update environment variables from GitHub Secrets
          echo "🔧 Updating environment variables..."
          cat > .env.docker << 'ENV_EOF'
          # Database Configuration
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          DATABASE_URL=postgresql://medusa:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/medusa

          # Redis Configuration
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_URL=redis://:${{ secrets.REDIS_PASSWORD }}@redis:6379

          # Worker Mode Configuration
          MEDUSA_WORKER_MODE=server
          DISABLE_MEDUSA_ADMIN=false

          # CORS Settings
          STORE_CORS=${{ secrets.STORE_CORS }}
          ADMIN_CORS=${{ secrets.ADMIN_CORS }}
          AUTH_CORS=${{ secrets.AUTH_CORS }}

          # Security Secrets
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          COOKIE_SECRET=${{ secrets.COOKIE_SECRET }}

          # Admin Backend URL
          MEDUSA_BACKEND_URL=${{ secrets.MEDUSA_BACKEND_URL }}

          # S3 Configuration
          S3_FILE_URL=${{ secrets.S3_FILE_URL }}
          S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}
          S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}
          S3_REGION=${{ secrets.S3_REGION }}
          S3_BUCKET=${{ secrets.S3_BUCKET }}
          S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}

          # Email Configuration
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          RESEND_FROM_EMAIL=${{ secrets.RESEND_FROM_EMAIL }}

          # Next.js Storefront Configuration
          NEXT_PUBLIC_MEDUSA_BACKEND_URL=${{ secrets.NEXT_PUBLIC_MEDUSA_BACKEND_URL }}
          NODE_ENV=production

          # Port Configuration
          PORT=9000
          ENV_EOF

          # Determine current active environment
          echo "🔍 Determining current active environment..."
          CURRENT_ENV=$(curl -s http://localhost/deploy/blue 2>/dev/null || echo "blue")
          echo "Current active environment: $CURRENT_ENV"

          # Determine target environment (opposite of current)
          if [ "$CURRENT_ENV" = "blue" ]; then
            TARGET_ENV="green"
            DEPLOY_SCRIPT="./scripts/deploy-green.sh"
            HEALTH_CHECK_URL="http://localhost:9002/health"
            CONTAINER_PREFIX="medusa-server-green"
          else
            TARGET_ENV="blue"
            DEPLOY_SCRIPT="./scripts/deploy-blue.sh"
            HEALTH_CHECK_URL="http://localhost:9000/health"
            CONTAINER_PREFIX="medusa-server-blue"
          fi

          echo "🎯 Deploying to $TARGET_ENV environment..."

          # Make deployment scripts executable
          chmod +x scripts/deploy-*.sh

          # Start infrastructure services if not running
          echo "🏗️ Starting infrastructure services..."
          docker-compose up -d postgres redis

          # Wait for infrastructure to be ready
          echo "⏳ Waiting for infrastructure to be ready..."
          timeout=60
          counter=0
          while [ $counter -lt $timeout ]; do
            if docker-compose exec postgres pg_isready -U medusa >/dev/null 2>&1 && \
               docker-compose exec redis redis-cli ping >/dev/null 2>&1; then
              echo "✅ Infrastructure is ready!"
              break
            fi
            echo "⏳ Waiting for infrastructure... ($counter/$timeout seconds)"
            sleep 5
            counter=$((counter + 5))
          done

          if [ $counter -ge $timeout ]; then
            echo "❌ Infrastructure failed to start within $timeout seconds"
            exit 1
          fi

          # Build and deploy to target environment
          echo "📦 Building and deploying to $TARGET_ENV..."
          if [ "$TARGET_ENV" = "green" ]; then
            docker-compose --profile green up -d --build medusa-server-green medusa-worker-green storefront
          else
            docker-compose up -d --build medusa-server-blue medusa-worker-blue storefront
          fi

          # Wait for target environment to be healthy
          echo "⏳ Waiting for $TARGET_ENV services to be healthy..."
          timeout=${{ env.DEPLOYMENT_TIMEOUT }}
          counter=0

          while [ $counter -lt $timeout ]; do
            if curl -f $HEALTH_CHECK_URL >/dev/null 2>&1; then
              echo "✅ $TARGET_ENV services are healthy!"
              break
            fi

            echo "⏳ Waiting for $TARGET_ENV services... ($counter/$timeout seconds)"
            sleep 10
            counter=$((counter + 10))
          done

          if [ $counter -ge $timeout ]; then
            echo "❌ $TARGET_ENV services failed to become healthy within $timeout seconds"
            echo "🔄 Rolling back deployment..."

            # Stop target environment
            if [ "$TARGET_ENV" = "green" ]; then
              docker-compose stop medusa-server-green medusa-worker-green
            else
              docker-compose stop medusa-server-blue medusa-worker-blue
            fi

            exit 1
          fi

          # Switch traffic to target environment
          echo "🔄 Switching traffic to $TARGET_ENV environment..."
          $DEPLOY_SCRIPT

          # Verify traffic switch
          echo "✅ Verifying traffic switch..."
          sleep 10

          # Test application functionality
          echo "🧪 Testing application functionality..."

          # Test storefront
          if curl -f http://localhost >/dev/null 2>&1; then
            echo "✅ Storefront is accessible"
          else
            echo "❌ Storefront is not accessible"
            exit 1
          fi

          # Test admin dashboard
          if curl -f http://localhost/app >/dev/null 2>&1; then
            echo "✅ Admin dashboard is accessible"
          else
            echo "❌ Admin dashboard is not accessible"
            exit 1
          fi

          # Test API health
          if curl -f http://localhost/api/health >/dev/null 2>&1; then
            echo "✅ API is healthy"
          else
            echo "❌ API is not healthy"
            exit 1
          fi

          # Run database migrations if needed
          echo "🗄️ Running database migrations..."
          docker-compose exec $CONTAINER_PREFIX npm run predeploy || true

          echo "🎉 Deployment to $TARGET_ENV completed successfully!"
          echo "🌐 Application is now running on $TARGET_ENV environment"
          echo "📊 Health check: http://localhost/health"
          echo "🛍️ Storefront: http://localhost"
          echo "⚙️ Admin: http://localhost/app"

          # Clean up old environment (optional - keep for quick rollback)
          echo "🧹 Cleaning up old environment..."
          if [ "$TARGET_ENV" = "green" ]; then
            docker-compose stop medusa-server-blue medusa-worker-blue || true
          else
            docker-compose stop medusa-server-green medusa-worker-green || true
          fi

          EOF

          # Execute deployment script
          ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} 'bash -s' < deploy.sh

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment completed successfully!"
          else
            echo "❌ Deployment failed!"
          fi
