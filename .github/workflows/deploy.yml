name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DEPLOYMENT_TIMEOUT: 900 # 15 minutes timeout for deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "üöÄ Starting automated deployment..."

          # Navigate to project directory
          cd ${{ secrets.PROJECT_PATH }}

          # Pull latest changes
          echo "üì• Pulling latest changes..."
          git pull origin main

          # Create environment variables from GitHub Secrets
          echo "üîß Updating environment variables..."
          cat > .env.docker << 'ENV_EOF'
          # Database Configuration
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          DATABASE_URL=postgresql://medusa:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/medusa

          # Redis Configuration
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_URL=redis://:${{ secrets.REDIS_PASSWORD }}@redis:6379

          # Worker Mode Configuration
          MEDUSA_WORKER_MODE=server
          DISABLE_MEDUSA_ADMIN=false

          # CORS Settings
          STORE_CORS=${{ secrets.STORE_CORS }}
          ADMIN_CORS=${{ secrets.ADMIN_CORS }}
          AUTH_CORS=${{ secrets.AUTH_CORS }}

          # Security Secrets
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          COOKIE_SECRET=${{ secrets.COOKIE_SECRET }}

          # Admin Backend URL
          MEDUSA_BACKEND_URL=${{ secrets.MEDUSA_BACKEND_URL }}

          # S3 Configuration
          S3_FILE_URL=${{ secrets.S3_FILE_URL }}
          S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}
          S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}
          S3_REGION=${{ secrets.S3_REGION }}
          S3_BUCKET=${{ secrets.S3_BUCKET }}
          S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}

          # Email Configuration
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          RESEND_FROM_EMAIL=${{ secrets.RESEND_FROM_EMAIL }}

          # Company Information (properly quoted)
          COMPANY_NAME="${{ secrets.COMPANY_NAME }}"
          COMPANY_ADDRESS="${{ secrets.COMPANY_ADDRESS }}"
          COMPANY_POSTAL_CODE="${{ secrets.COMPANY_POSTAL_CODE }}"
          COMPANY_CITY="${{ secrets.COMPANY_CITY }}"
          COMPANY_EMAIL="${{ secrets.COMPANY_EMAIL }}"
          COMPANY_PHONE="${{ secrets.COMPANY_PHONE }}"
          COMPANY_WEBSITE="${{ secrets.COMPANY_WEBSITE }}"
          COMPANY_TAX_ID="${{ secrets.COMPANY_TAX_ID }}"
          COMPANY_BANK_INFO="${{ secrets.COMPANY_BANK_INFO }}"

          # PDF Template Customization (properly quoted)
          PDF_LOGO_URL="${{ secrets.PDF_LOGO_URL }}"
          PDF_FOOTER_TEXT="${{ secrets.PDF_FOOTER_TEXT }}"
          PDF_TERMS_CONDITIONS="${{ secrets.PDF_TERMS_CONDITIONS }}"
          PDF_PRIVACY_POLICY="${{ secrets.PDF_PRIVACY_POLICY }}"

          # Email Template Customization (properly quoted)
          EMAIL_SIGNATURE="${{ secrets.EMAIL_SIGNATURE }}"
          EMAIL_FOOTER="${{ secrets.EMAIL_FOOTER }}"

          # Next.js Storefront Configuration
          NEXT_PUBLIC_MEDUSA_BACKEND_URL=${{ secrets.NEXT_PUBLIC_MEDUSA_BACKEND_URL }}
          NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}
          NEXT_PUBLIC_DEFAULT_REGION=${{ secrets.NEXT_PUBLIC_DEFAULT_REGION }}
          NEXT_PUBLIC_STRIPE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_KEY }}
          REVALIDATE_SECRET=${{ secrets.REVALIDATE_SECRET }}
          NODE_ENV=production

          # Port Configuration
          PORT=9000
          ENV_EOF

          # Determine current active environment
          echo "üîç Determining current active environment..."
          CURRENT_ENV=$(curl -s http://localhost/deploy/blue 2>/dev/null || echo "blue")
          echo "Current active environment: $CURRENT_ENV"

          # Determine target environment (opposite of current)
          if [ "$CURRENT_ENV" = "blue" ]; then
            TARGET_ENV="green"
            DEPLOY_SCRIPT="./scripts/deploy-green.sh"
            HEALTH_CHECK_URL="http://localhost:9002/health"
            CONTAINER_PREFIX="medusa-server-green"
          else
            TARGET_ENV="blue"
            DEPLOY_SCRIPT="./scripts/deploy-blue.sh"
            HEALTH_CHECK_URL="http://localhost:9000/health"
            CONTAINER_PREFIX="medusa-server-blue"
          fi

          echo "üéØ Deploying to $TARGET_ENV environment..."

          # Make deployment scripts executable
          chmod +x scripts/deploy-*.sh

          # Start infrastructure services if not running
          echo "üèóÔ∏è Starting infrastructure services..."
          docker-compose up -d postgres redis

          # Wait for infrastructure to be ready
          echo "‚è≥ Waiting for infrastructure to be ready..."
          timeout=60
          counter=0
          while [ $counter -lt $timeout ]; do
            if docker-compose exec postgres pg_isready -U medusa >/dev/null 2>&1 && \
               docker-compose exec redis redis-cli ping >/dev/null 2>&1; then
              echo "‚úÖ Infrastructure is ready!"
              break
            fi
            echo "‚è≥ Waiting for infrastructure... ($counter/$timeout seconds)"
            sleep 5
            counter=$((counter + 5))
          done

          if [ $counter -ge $timeout ]; then
            echo "‚ùå Infrastructure failed to start within $timeout seconds"
            exit 1
          fi

          # Build and deploy to target environment
          echo "üì¶ Building and deploying to $TARGET_ENV..."
          echo "DEBUG: About to start container build process..."

          if [ "$TARGET_ENV" = "green" ]; then
            echo "DEBUG: Starting green environment containers..."
            docker-compose --profile green up -d --build medusa-server-green medusa-worker-green nginx
            BUILD_EXIT_CODE=$?
          else
            echo "DEBUG: Starting blue environment containers..."
            docker-compose up -d --build medusa-server-blue medusa-worker-blue nginx
            BUILD_EXIT_CODE=$?
          fi

          echo "DEBUG: Container build completed with exit code: $BUILD_EXIT_CODE"
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "‚ùå Container build failed with exit code $BUILD_EXIT_CODE"
            exit 1
          fi

          echo "DEBUG: Checking container status..."
          docker-compose ps

          # Wait for target environment to be healthy
          echo "‚è≥ Waiting for $TARGET_ENV services to be healthy..."
          timeout=${{ env.DEPLOYMENT_TIMEOUT }}
          counter=0

          while [ $counter -lt $timeout ]; do
            if curl -f $HEALTH_CHECK_URL >/dev/null 2>&1; then
              echo "‚úÖ $TARGET_ENV services are healthy!"

              # Switch traffic to the healthy target environment
              echo "üîÑ Switching traffic to $TARGET_ENV instance..."

              # Wait for nginx to be fully ready
              sleep 5

              # Create backup of current nginx config
              cp nginx/nginx.conf nginx/nginx.conf.backup

              if [ "$TARGET_ENV" = "green" ]; then
                # Force switch to green regardless of current state
                sed -i 's/proxy_pass http:\/\/medusa_blue/proxy_pass http:\/\/medusa_green/g' nginx/nginx.conf
                sed -i 's/proxy_pass http:\/\/medusa_blue_health/proxy_pass http:\/\/medusa_green_health/g' nginx/nginx.conf
              else
                # Force switch to blue regardless of current state
                sed -i 's/proxy_pass http:\/\/medusa_green/proxy_pass http:\/\/medusa_blue/g' nginx/nginx.conf
                sed -i 's/proxy_pass http:\/\/medusa_green_health/proxy_pass http:\/\/medusa_blue_health/g' nginx/nginx.conf
              fi

              # Test nginx configuration before reloading
              if docker-compose exec nginx nginx -t; then
                # Configuration is valid, reload nginx
                echo "‚úÖ Nginx configuration is valid, reloading..."
                docker-compose exec nginx nginx -s reload || {
                  echo "‚ùå Nginx reload failed, restoring backup..."
                  cp nginx/nginx.conf.backup nginx/nginx.conf
                  docker-compose exec nginx nginx -s reload
                  exit 1
                }
                echo "‚úÖ Traffic switched to $TARGET_ENV instance"
              else
                echo "‚ùå Invalid nginx configuration, restoring backup..."
                cp nginx/nginx.conf.backup nginx/nginx.conf
                exit 1
              fi

              break
            fi

            echo "‚è≥ Waiting for $TARGET_ENV services... ($counter/$timeout seconds)"
            sleep 10
            counter=$((counter + 10))
          done

          if [ $counter -ge $timeout ]; then
            echo "‚ùå $TARGET_ENV services failed to become healthy within $timeout seconds"
            echo "üîÑ Rolling back deployment..."

          # Stop target environment
          if [ "$TARGET_ENV" = "green" ]; then
            docker-compose stop medusa-server-green medusa-worker-green
          else
            docker-compose stop medusa-server-blue medusa-worker-blue
          fi

            exit 1
          fi

          # Switch traffic to target environment
          echo "üîÑ Switching traffic to $TARGET_ENV environment..."
          $DEPLOY_SCRIPT

          # Verify traffic switch
          echo "‚úÖ Verifying traffic switch..."
          sleep 10

          # Test application functionality
          echo "üß™ Testing application functionality..."

          # Test storefront
          if curl -f http://localhost >/dev/null 2>&1; then
            echo "‚úÖ Storefront is accessible"
          else
            echo "‚ùå Storefront is not accessible"
            exit 1
          fi

          # Test admin dashboard
          if curl -f http://localhost/app >/dev/null 2>&1; then
            echo "‚úÖ Admin dashboard is accessible"
          else
            echo "‚ùå Admin dashboard is not accessible"
            exit 1
          fi

          # Test API health
          if curl -f http://localhost/api/health >/dev/null 2>&1; then
            echo "‚úÖ API is healthy"
          else
            echo "‚ùå API is not healthy"
            exit 1
          fi

          # Run database migrations if needed
          echo "üóÑÔ∏è Running database migrations..."
          docker-compose exec $CONTAINER_PREFIX npm run predeploy || true

          # Stop old environment after successful deployment
          echo "üõë Stopping old environment..."
          if [ "$TARGET_ENV" = "green" ]; then
            docker-compose stop medusa-server-blue medusa-worker-blue
            echo "üõë Blue environment stopped"
          else
            docker-compose stop medusa-server-green medusa-worker-green
            echo "üõë Green environment stopped"
          fi

          echo "üéâ Deployment to $TARGET_ENV completed successfully!"
          echo "üåê Medusa Backend is now running on $TARGET_ENV environment"
          echo "üìä Health check: http://localhost/api/health"
          echo "‚öôÔ∏è Admin: http://localhost/app"
          echo "üõçÔ∏è Storefront: Deploy separately to Vercel"

          # Clean up old environment (optional - keep for quick rollback)
          echo "üßπ Cleaning up old environment..."
          if [ "$TARGET_ENV" = "green" ]; then
            docker-compose stop medusa-server-blue medusa-worker-blue || true
          else
            docker-compose stop medusa-server-green medusa-worker-green || true
          fi

          EOF

          # Copy deployment script to server
          echo "üìã Copying deployment script to server..."
          scp deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.HOST }}:/opt/medusa-app/deploy.sh

          # Make script executable
          ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} "chmod +x /opt/medusa-app/deploy.sh"

          # Execute deployment script from server
          echo "üöÄ Executing deployment script on server..."
          ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} "/opt/medusa-app/deploy.sh"

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Deployment completed successfully!"
          else
            echo "‚ùå Deployment failed!"
          fi
